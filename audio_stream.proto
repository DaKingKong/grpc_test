syntax = "proto3";

import "google/protobuf/empty.proto";

package ringcentral.ringcx.streaming.v1beta2;

enum Codec {
  OPUS = 0;
  PCMA = 1;
  PCMU = 2;
  L16 = 3;
  FLAC = 4;
}

enum ProductType {
  QUEUE = 0;
  CAMPAIGN = 1;
  IVR = 2; // RFU
}

enum DialogType {
  UNKNOWN = 0; // because first enum must be zero
  INBOUND = 1;
  OUTBOUND = 2;
}

enum ParticipantType {
  CONTACT = 0;
  AGENT = 1;
  BOT = 5; // yes, value is 5
}

message Account {
  string id = 1;
  string sub_account_id = 2;
  string rc_account_id = 3;
}

message Product {
  string id = 1;
  ProductType type = 2;
}

message Dialog {
  string id = 1;
  DialogType type = 2;
  optional string ani = 3;
  optional string dnis = 4;
  optional string language = 5; // https://www.rfc-editor.org/rfc/bcp/bcp47.txt
  map<string, string> attributes = 6;
}

message Participant {
  string id = 1;
  ParticipantType type = 2;
  optional string name = 3;
}

message AudioFormat {
  Codec codec = 1;
  uint32 rate = 2;  // must be 8000 for now
  uint32 ptime = 3; // size of audio chunks in msec
}

message AudioContent {
  bytes payload = 1;
  uint32 seq = 2;      // could be repeated
  uint32 duration = 3; // in msec
}

// Service definition for audio streaming
service Streaming {
  // For each Dialog, gRPC client makes single 'Stream' call toward server and all 'StreamEvent' messages are sent over the established stream
  // Server does not return any response/stream back
  rpc Stream(stream StreamEvent) returns (google.protobuf.Empty);
}

// Health service for monitoring
service Health {
  // Check the health status of the service
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}

// Health check request message
message HealthCheckRequest {
  string service = 1;
}

// Health check response message
message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
  }
  ServingStatus status = 1;
}

message StreamEvent {
  string session_id = 1;
  oneof event {
    DialogInitEvent dialog_init = 2;
    SegmentStartEvent segment_start = 3;
    SegmentMediaEvent segment_media = 4;
    SegmentInfoEvent segment_info = 5;
    SegmentStopEvent segment_stop = 6;
  }
}

message DialogInitEvent {
  Account account = 1;
  Dialog dialog = 2;
}

message SegmentStartEvent {
  string segment_id = 1;
  optional Product product = 2;
  Participant participant = 3;
  optional AudioFormat audio_format = 4;
}

message SegmentMediaEvent {
  string segment_id = 1;
  AudioContent audio_content = 2;
}

message SegmentInfoEvent {
  string segment_id = 1;
  string event = 2;
  optional string data = 3;
}

message SegmentStopEvent {
  string segment_id = 1;
}